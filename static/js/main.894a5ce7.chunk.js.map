{"version":3,"sources":["Navbar/Navbar.js","Node/node.js","Navbar/option.js","Algorithms/Dijkstra.js","board/board.js","App.js","reportWebVitals.js","context.js","index.js"],"names":["Nav_bar","props","useState","algorithm","setAlgorithm","setAlgo","algo","document","getElementById","className","Navbar","variant","expand","Brand","style","marginLeft","color","href","display","flexDirection","justifyContent","alignItems","onClick","clear","id","target","run","NavDropdown","title","Item","disabled","Divider","node","isStartNode","isFinishNode","isWall","onMouseUp","mouseUp","onMouseDown","mouseDown","row","col","onMouseEnter","mouseEnter","option","Dijkstra","startNode","finishNode","map","visitedNodes","m","n","distance","nodes","newMap","i","length","j","push","getAllNodes","sort","a","b","currentNode","shift","console","log","path","pre","previous","shortestPath","neighbours","getNeighbours","forEach","neighbour","visited","updateDistance","Board","state","board_array","mouseIsEntered","Math","floor","window","innerWidth","innerHeight","addEventListener","setState","reset","this","isMouseEntered","array","m_array","Infinity","newNode","newArray","plotWall","Fragment","rowIdx","colIdx","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","context","createContext","start_i","start_j","finish_i","finish_j","ReactDOM","render","StrictMode","Provider","value"],"mappings":"4ZAKe,SAASA,EAAQC,GAC9B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,SAASC,EAAQC,GACfC,SAASC,eAAe,OAAOC,UAAY,cAC3CL,EAAaE,GAEf,OACE,8BACE,cAACI,EAAA,EAAD,CAAQD,UAAU,SAASE,QAAQ,IAAIC,OAAO,KAA9C,SACE,sBAAKH,UAAU,OAAf,UACE,8BACE,cAACC,EAAA,EAAOG,MAAR,CACEJ,UAAU,QACVK,MAAO,CAAEC,WAAY,OAAQC,MAAO,SACpCC,KAAK,QAHP,sCAQF,qBAAKR,UAAU,UAAf,SACE,sBACEK,MAAO,CACLI,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,WAAY,UALhB,UAQE,qBACEZ,UAAU,cACVQ,KAAK,QACLK,QAAS,kBAAMrB,EAAMsB,SAHvB,mBAOA,sBACEd,UAAU,WACVe,GAAG,MACHC,OAAO,SACPH,QAAS,kBAAMrB,EAAMyB,IAAIvB,IAJ3B,iBAMOA,EANP,OAQA,qBAAKW,MAAO,CAAEI,QAAS,OAAQC,cAAe,OAA9C,SACE,eAACQ,EAAA,EAAD,CAAaC,MAAO,aAAcJ,GAAG,eAArC,UACE,cAACG,EAAA,EAAYE,KAAb,CAAkBC,SAAS,OAAOb,KAAK,cAAvC,iCAGA,cAACU,EAAA,EAAYI,QAAb,IACA,cAACJ,EAAA,EAAYE,KAAb,CACEP,QAAS,kBAAMjB,EAAQ,aACvBY,KAAK,cAFP,sBAMA,cAACU,EAAA,EAAYE,KAAb,CACEP,QAAS,kBAAMjB,EAAQ,wBACvBY,KAAK,cAFP,iCAMA,cAACU,EAAA,EAAYE,KAAb,CACEP,QAAS,kBAAMjB,EAAQ,uBACvBY,KAAK,cAFP,iD,MC/DH,SAASe,EAAK/B,GAC3B,IAAIQ,EAAYR,EAAMgC,YAClB,iBACAhC,EAAMiC,aACN,kBACAjC,EAAMkC,OACN,YACA,OACJ,OACE,qBACEC,UAAW,kBAAMnC,EAAMoC,WACvBC,YAAa,kBAAMrC,EAAMsC,UAAUtC,EAAMuC,IAAKvC,EAAMwC,MACpDC,aAAc,kBAAMzC,EAAM0C,WAAW1C,EAAMuC,IAAKvC,EAAMwC,MACtDhC,UAAWA,I,MCbF,SAASmC,IACtB,OAAO,qBAAKnC,UAAU,mBAAf,oBCJF,SAASoC,EAASC,EAAWC,EAAYC,GAC9C,IAAIC,EAAe,GACnBD,EAAIF,EAAUI,GAAGJ,EAAUK,GAAGC,SAAW,EAEzC,IADA,IAAIC,EAwBN,SAAqBL,GAEnB,IADA,IAAIM,EAAS,GACJC,EAAI,EAAGA,EAAIP,EAAIQ,OAAQD,IAC9B,IAAK,IAAIE,EAAI,EAAGA,EAAIT,EAAI,GAAGQ,OAAQC,IACjCH,EAAOI,KAAKV,EAAIO,GAAGE,IAGvB,OAAOH,EA/BKK,CAAYX,GAH2B,aAKjDK,EAAMO,MAAK,SAACC,EAAGC,GACb,OAAOD,EAAET,SAAWU,EAAEV,YAExB,IAAIW,EAAcV,EAAMW,QACxB,GAAID,EAAYvB,MAAQO,EAAWG,GAAKa,EAAYtB,MAAQM,EAAWI,EAErE,OAmDN,SAAsBJ,GACpBkB,QAAQC,IAAInB,GACZ,IAAIoB,EAAO,GACPC,EAAMrB,EAAWsB,SACrB,KAAe,OAARD,GACLD,EAAKT,KAAKU,GACVA,EAAMA,EAAIC,SAEZJ,QAAQC,IAAIC,GA5DRG,CAAaP,GACP,CAAN,EAAOd,GAET,IAAIsB,EAwBR,SAAuBR,EAAaf,GAClC,IAAIuB,EAAa,GACbR,EAAYvB,IAAM,GACpB+B,EAAWb,KAAKV,EAAIe,EAAYvB,IAAM,GAAGuB,EAAYtB,MAEnDsB,EAAYvB,IAAMQ,EAAIQ,OAAS,GACjCe,EAAWb,KAAKV,EAAIe,EAAYvB,IAAM,GAAGuB,EAAYtB,MAEnDsB,EAAYtB,IAAM,GACpB8B,EAAWb,KAAKV,EAAIe,EAAYvB,KAAKuB,EAAYtB,IAAM,IAErDsB,EAAYtB,IAAMO,EAAI,GAAGQ,OAAS,GACpCe,EAAWb,KAAKV,EAAIe,EAAYvB,KAAKuB,EAAYtB,IAAM,IAEzD,OAAO8B,EAtCYC,CAAcT,EAAaf,GAC5CuB,EAAWE,SAAQ,SAACC,GACbA,EAAUvC,SACRuC,EAAUC,SACb1B,EAAaS,KAAKgB,GAqC5B,SAAwBX,EAAaW,GACnCA,EAAUC,SAAU,EAChBZ,EAAYX,SAAW,EAAIsB,EAAUtB,WACvCsB,EAAUtB,SAAWW,EAAYX,SAAW,EAC5CsB,EAAUL,SAAWN,GAvCjBa,CAAeb,EAAaW,QAf3BrB,EAAMG,OAAS,GAAG,CAAC,IAAD,wCAoBzB,OADAS,QAAQC,IAAIjB,EAAc,QACnBA,E,ICjBY4B,E,kDACnB,WAAY5E,GAAQ,IAAD,8BACjB,cAAMA,IACD6E,MAAQ,CACXC,YAAa,GACbC,gBAAgB,EAChBlC,UAAW,CACTI,EAAG+B,KAAKC,MACND,KAAKC,MAAMC,OAAOC,WAAa,IAAM,EACnCH,KAAKC,MAAMC,OAAOC,WAAa,IAAM,GAEzCjC,EAAG8B,KAAKC,MAAMD,KAAKC,OAAOC,OAAOE,YAAc,KAAO,IAAM,IAE9DtC,WAAY,CACVG,EAAG+B,KAAKC,MACND,KAAKC,MAAMC,OAAOC,WAAa,IAAM,EACnCH,KAAKC,MAAMC,OAAOC,WAAa,IAAM,GAEzCjC,EAAG8B,KAAKC,MAAMD,KAAKC,OAAOC,OAAOE,YAAc,KAAO,IAAM,KAGhEF,OAAOG,iBAAiB,UAAU,WAChC,EAAKC,SAAS,CACZzC,UAAW,CACTI,EAAG+B,KAAKC,MACND,KAAKC,MAAMC,OAAOC,WAAa,IAAM,EACnCH,KAAKC,MAAMC,OAAOC,WAAa,IAAM,GAEzCjC,EAAG8B,KAAKC,MAAMD,KAAKC,OAAOC,OAAOE,YAAc,KAAO,IAAM,IAE9DtC,WAAY,CACVG,EAAG+B,KAAKC,MACND,KAAKC,MAAMC,OAAOC,WAAa,IAAM,EACnCH,KAAKC,MAAMC,OAAOC,WAAa,IAAM,GAEzCjC,EAAG8B,KAAKC,MAAMD,KAAKC,OAAOC,OAAOE,YAAc,KAAO,IAAM,MAGhE,EAAKG,WArCU,E,qDAwCnB,WACEC,KAAKD,U,mBAEP,WACE,IAAItC,EAAI+B,KAAKC,MAAMC,OAAOC,WAAa,IACnCjC,EAAI8B,KAAKC,OAAOC,OAAOE,YAAc,KAAO,IAChDI,KAAKF,SAAS,CACZG,gBAAgB,IAGlB,IADA,IAAIC,EAAQ,GACHpC,EAAI,EAAGA,EAAIL,EAAGK,IAAK,CAE1B,IADA,IAAIqC,EAAU,GACLnC,EAAI,EAAGA,EAAIN,EAAGM,IACrBmC,EAAQlC,KAAK,CACXlB,IAAKe,EACLd,IAAKgB,EACLtB,QAAQ,EACRF,YACEsB,IAAMkC,KAAKX,MAAMhC,UAAUI,GAAKO,IAAMgC,KAAKX,MAAMhC,UAAUK,EAC7DjB,aACEqB,IAAMkC,KAAKX,MAAM/B,WAAWG,GAAKO,IAAMgC,KAAKX,MAAM/B,WAAWI,EAC/DkB,SAAU,KACVjB,SAAUyC,MAGdF,EAAMjC,KAAKkC,GAEbH,KAAKF,SAAS,CACZR,YAAaY,M,sBAGjB,SAASzC,EAAGC,GACV,IAAIwC,EAAQF,KAAKX,MAAMC,YACnB/C,EAAO2D,EAAMzC,GAAGC,GAChB2C,EAAO,2BACN9D,GADM,IAETG,QAASH,EAAKG,SAGhB,OADAwD,EAAMzC,GAAGC,GAAK2C,EACPH,I,uBAET,SAAUzC,EAAGC,GACX,IAAI4C,EAAWN,KAAKO,SAAS9C,EAAGC,GAChCsC,KAAKF,SAAS,CACZR,YAAagB,EACbf,gBAAgB,M,qBAGpB,WACES,KAAKF,SAAS,CACZP,gBAAgB,M,wBAGpB,SAAW9B,EAAGC,GACZ,GAAKsC,KAAKX,MAAME,eAAhB,CACA,IAAIe,EAAWN,KAAKO,SAAS9C,EAAGC,GAChCsC,KAAKF,SAAS,CACZR,YAAagB,O,iBAGjB,SAAIzF,GACW,MAATA,IAEgB,aAATA,EACTuC,EACE4C,KAAKX,MAAMhC,UACX2C,KAAKX,MAAM/B,WACX0C,KAAKX,MAAMC,cAEK,wBAATzE,GAES,uBAATA,IADT2D,QAAQC,IAAI5D,M,oBAKhB,WAAU,IAAD,OACP,OACE,eAAC,IAAM2F,SAAP,WACE,cAAC,EAAD,CAAK1E,MAAO,kBAAM,EAAKiE,SAAS9D,IAAK,SAACpB,GAAD,OAAU,EAAKoB,IAAIpB,MACxD,cAAC,EAAD,IACA,qBAAKG,UAAU,MAAf,SACGgF,KAAKX,MAAMC,YAAY/B,KAAI,SAACR,EAAK0D,GAChC,OACE,qBAAkBzF,UAAU,IAA5B,SACG+B,EAAIQ,KAAI,SAACP,EAAK0D,GACb,OACE,cAAC,EAAD,CACE3D,IAAK0D,EACLzD,IAAK0D,EAEL9D,QAAS,kBAAM,EAAKA,WACpBM,WAAY,SAACO,EAAGC,GAAJ,OAAU,EAAKR,WAAWO,EAAGC,IACzCZ,UAAW,SAACW,EAAGC,GAAJ,OAAU,EAAKZ,UAAUW,EAAGC,IACvChB,OAAQM,EAAIN,OACZF,YAAaQ,EAAIR,YACjBC,aAAcO,EAAIP,cANbgE,EAASC,OANZD,e,GA5HWE,aCIpBC,MARf,WACE,OACE,qBAAK5F,UAAU,MAAf,SACE,cAAC,EAAD,OCMS6F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCLDQ,EAAUC,wBAAc,CACnCzD,EAAG,KACHE,EAAG,KACHwD,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,SAAU,OCDZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACR,EAAQS,SAAT,CACEC,MAAO,CACLlE,EAAG,KACHE,EAAG,KACHwD,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,SAAU,MAPd,SAUE,cAAC,EAAD,QAGJ7G,SAASC,eAAe,SAM1B8F,M","file":"static/js/main.894a5ce7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Navbar, NavDropdown } from \"react-bootstrap\";\r\nimport \"./Navbar.css\";\r\n\r\nexport default function Nav_bar(props) {\r\n  const [algorithm, setAlgorithm] = useState(\"\");\r\n  function setAlgo(algo) {\r\n    document.getElementById(\"run\").className = \"list button\";\r\n    setAlgorithm(algo);\r\n  }\r\n  return (\r\n    <div>\r\n      <Navbar className=\"navbar\" variant=\"k\" expand=\"lg\">\r\n        <div className=\"cont\">\r\n          <div>\r\n            <Navbar.Brand\r\n              className=\"title\"\r\n              style={{ marginLeft: \"20px\", color: \"white\" }}\r\n              href=\"#home\"\r\n            >\r\n              Pathfinding Visualizer\r\n            </Navbar.Brand>\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <div\r\n                className=\"list button\"\r\n                href=\"#home\"\r\n                onClick={() => props.clear()}\r\n              >\r\n                Clear\r\n              </div>\r\n              <div\r\n                className=\"disabled\"\r\n                id=\"run\"\r\n                target=\"_blank\"\r\n                onClick={() => props.run(algorithm)}\r\n              >\r\n                Run {algorithm}!\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <NavDropdown title={\"Algorithms\"} id=\"nav-dropdown\">\r\n                  <NavDropdown.Item disabled=\"true\" href=\"#action/3.4\">\r\n                    Select an Algorithm\r\n                  </NavDropdown.Item>\r\n                  <NavDropdown.Divider />\r\n                  <NavDropdown.Item\r\n                    onClick={() => setAlgo(\"Dijkstra\")}\r\n                    href=\"#action/3.1\"\r\n                  >\r\n                    Dijkstra\r\n                  </NavDropdown.Item>\r\n                  <NavDropdown.Item\r\n                    onClick={() => setAlgo(\"Breath First Search\")}\r\n                    href=\"#action/3.2\"\r\n                  >\r\n                    Breath First Search\r\n                  </NavDropdown.Item>\r\n                  <NavDropdown.Item\r\n                    onClick={() => setAlgo(\"Depth First Search\")}\r\n                    href=\"#action/3.3\"\r\n                  >\r\n                    Depth First Search\r\n                  </NavDropdown.Item>\r\n                </NavDropdown>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./node.css\";\r\n\r\nexport default function node(props) {\r\n  let className = props.isStartNode\r\n    ? \"node startNode\"\r\n    : props.isFinishNode\r\n    ? \"node finishNode\"\r\n    : props.isWall\r\n    ? \"node wall\"\r\n    : \"node\";\r\n  return (\r\n    <div\r\n      onMouseUp={() => props.mouseUp()}\r\n      onMouseDown={() => props.mouseDown(props.row, props.col)}\r\n      onMouseEnter={() => props.mouseEnter(props.row, props.col)}\r\n      className={className}\r\n    ></div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./option.css\";\r\n\r\nexport default function option() {\r\n  return <div className=\"option-container\">option</div>;\r\n}\r\n","export function Dijkstra(startNode, finishNode, map) {\r\n  let visitedNodes = [];\r\n  map[startNode.m][startNode.n].distance = 0;\r\n  let nodes = getAllNodes(map);\r\n  while (nodes.length > 0) {\r\n    nodes.sort((a, b) => {\r\n      return a.distance - b.distance;\r\n    });\r\n    let currentNode = nodes.shift();\r\n    if (currentNode.row === finishNode.m && currentNode.col === finishNode.n) {\r\n      shortestPath(currentNode);\r\n      return visitedNodes;\r\n    }\r\n    let neighbours = getNeighbours(currentNode, map);\r\n    neighbours.forEach((neighbour) => {\r\n      if (!neighbour.isWall) {\r\n        if (!neighbour.visited) {\r\n          visitedNodes.push(neighbour);\r\n        }\r\n        updateDistance(currentNode, neighbour);\r\n      }\r\n    });\r\n  }\r\n  console.log(visitedNodes, \"last\");\r\n  return visitedNodes;\r\n}\r\n\r\nfunction getAllNodes(map) {\r\n  let newMap = [];\r\n  for (let i = 0; i < map.length; i++) {\r\n    for (let j = 0; j < map[0].length; j++) {\r\n      newMap.push(map[i][j]);\r\n    }\r\n  }\r\n  return newMap;\r\n}\r\n\r\nfunction getNeighbours(currentNode, map) {\r\n  let neighbours = [];\r\n  if (currentNode.row > 0) {\r\n    neighbours.push(map[currentNode.row - 1][currentNode.col]);\r\n  }\r\n  if (currentNode.row < map.length - 1) {\r\n    neighbours.push(map[currentNode.row + 1][currentNode.col]);\r\n  }\r\n  if (currentNode.col > 0) {\r\n    neighbours.push(map[currentNode.row][currentNode.col - 1]);\r\n  }\r\n  if (currentNode.col < map[0].length - 1) {\r\n    neighbours.push(map[currentNode.row][currentNode.col + 1]);\r\n  }\r\n  return neighbours;\r\n}\r\n\r\nfunction updateDistance(currentNode, neighbour) {\r\n  neighbour.visited = true;\r\n  if (currentNode.distance + 1 < neighbour.distance) {\r\n    neighbour.distance = currentNode.distance + 1;\r\n    neighbour.previous = currentNode;\r\n  }\r\n}\r\n\r\nfunction shortestPath(finishNode) {\r\n  console.log(finishNode);\r\n  let path = [];\r\n  let pre = finishNode.previous;\r\n  while (pre !== null) {\r\n    path.push(pre);\r\n    pre = pre.previous;\r\n  }\r\n  console.log(path);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./board.css\";\r\nimport Nav from \"../Navbar/Navbar\";\r\nimport Node from \"../Node/node\";\r\nimport Option from \"../Navbar/option\";\r\nimport { Dijkstra } from \"../Algorithms/Dijkstra\";\r\n\r\nexport default class Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      board_array: [],\r\n      mouseIsEntered: false,\r\n      startNode: {\r\n        m: Math.floor(\r\n          Math.floor(window.innerWidth / 28) / 2 -\r\n            Math.floor(window.innerWidth / 28) / 4\r\n        ),\r\n        n: Math.floor(Math.floor((window.innerHeight - 170) / 28) / 2),\r\n      },\r\n      finishNode: {\r\n        m: Math.floor(\r\n          Math.floor(window.innerWidth / 28) / 2 +\r\n            Math.floor(window.innerWidth / 28) / 4\r\n        ),\r\n        n: Math.floor(Math.floor((window.innerHeight - 170) / 28) / 2),\r\n      },\r\n    };\r\n    window.addEventListener(\"resize\", () => {\r\n      this.setState({\r\n        startNode: {\r\n          m: Math.floor(\r\n            Math.floor(window.innerWidth / 25) / 2 -\r\n              Math.floor(window.innerWidth / 25) / 4\r\n          ),\r\n          n: Math.floor(Math.floor((window.innerHeight - 170) / 28) / 2),\r\n        },\r\n        finishNode: {\r\n          m: Math.floor(\r\n            Math.floor(window.innerWidth / 25) / 2 +\r\n              Math.floor(window.innerWidth / 25) / 4\r\n          ),\r\n          n: Math.floor(Math.floor((window.innerHeight - 170) / 28) / 2),\r\n        },\r\n      });\r\n      this.reset();\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.reset();\r\n  }\r\n  reset() {\r\n    let m = Math.floor(window.innerWidth / 28);\r\n    let n = Math.floor((window.innerHeight - 170) / 28);\r\n    this.setState({\r\n      isMouseEntered: false,\r\n    });\r\n    let array = [];\r\n    for (let i = 0; i < m; i++) {\r\n      let m_array = [];\r\n      for (let j = 0; j < n; j++) {\r\n        m_array.push({\r\n          row: i,\r\n          col: j,\r\n          isWall: false,\r\n          isStartNode:\r\n            i === this.state.startNode.m && j === this.state.startNode.n,\r\n          isFinishNode:\r\n            i === this.state.finishNode.m && j === this.state.finishNode.n,\r\n          previous: null,\r\n          distance: Infinity,\r\n        });\r\n      }\r\n      array.push(m_array);\r\n    }\r\n    this.setState({\r\n      board_array: array,\r\n    });\r\n  }\r\n  plotWall(m, n) {\r\n    let array = this.state.board_array;\r\n    let node = array[m][n];\r\n    let newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    array[m][n] = newNode;\r\n    return array;\r\n  }\r\n  mouseDown(m, n) {\r\n    let newArray = this.plotWall(m, n);\r\n    this.setState({\r\n      board_array: newArray,\r\n      mouseIsEntered: true,\r\n    });\r\n  }\r\n  mouseUp() {\r\n    this.setState({\r\n      mouseIsEntered: false,\r\n    });\r\n  }\r\n  mouseEnter(m, n) {\r\n    if (!this.state.mouseIsEntered) return;\r\n    let newArray = this.plotWall(m, n);\r\n    this.setState({\r\n      board_array: newArray,\r\n    });\r\n  }\r\n  run(algo) {\r\n    if (algo === \" \") {\r\n      return;\r\n    } else if (algo === \"Dijkstra\") {\r\n      Dijkstra(\r\n        this.state.startNode,\r\n        this.state.finishNode,\r\n        this.state.board_array\r\n      );\r\n    } else if (algo === \"Breath First Search\") {\r\n      console.log(algo);\r\n    } else if (algo === \"Depth First Search\") {\r\n      console.log(algo);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Nav clear={() => this.reset()} run={(algo) => this.run(algo)} />\r\n        <Option />\r\n        <div className=\"col\">\r\n          {this.state.board_array.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx} className=\"c\">\r\n                {row.map((col, colIdx) => {\r\n                  return (\r\n                    <Node\r\n                      row={rowIdx}\r\n                      col={colIdx}\r\n                      key={rowIdx - colIdx}\r\n                      mouseUp={() => this.mouseUp()}\r\n                      mouseEnter={(m, n) => this.mouseEnter(m, n)}\r\n                      mouseDown={(m, n) => this.mouseDown(m, n)}\r\n                      isWall={col.isWall}\r\n                      isStartNode={col.isStartNode}\r\n                      isFinishNode={col.isFinishNode}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./board.css\";\r\n// import Node from \"../Node/node\";\r\n\r\n// export default function Board() {\r\n//   const [board_array, setBoard_array] = useState([]);\r\n//   const [width, setWidth] = useState(window.innerWidth);\r\n//   const [height, setHeight] = useState(window.innerHeight);\r\n//   useEffect(() => {\r\n//     window.addEventListener(\"resize\", () => {\r\n//       setWidth(window.innerWidth);\r\n//       setHeight(window.innerHeight);\r\n//     });\r\n//     let m = Math.floor(width / 25);\r\n//     let n = Math.floor((height - 70) / 25);\r\n//     reset(m, n);\r\n//   }, [height, width]);\r\n//   function reset(m, n) {\r\n//     console.log(\"jsfd \");\r\n//     let array = [];\r\n//     for (let i = 0; i < m; i++) {\r\n//       let m_array = [];\r\n//       for (let j = 0; j < n; j++) {\r\n//         m_array.push({\r\n//           row: i,\r\n//           col: j,\r\n//           isWall: false,\r\n//         });\r\n//       }\r\n//       array.push(m_array);\r\n//     }\r\n//     setBoard_array(array);\r\n//   }\r\n//   function plotWall(m, n) {\r\n//     let array = board_array;\r\n//     if (array[m][n].isWall) {\r\n//       array[m][n].isWall = false;\r\n//     } else {\r\n//       array[m][n].isWall = true;\r\n//     }\r\n//     setBoard_array(array);\r\n//   }\r\n//   return (\r\n//     <div className=\"col\">\r\n//       {board_array.map((row, rowIdx) => {\r\n//         return (\r\n//           <div key={rowIdx}>\r\n//             {row.map((col, colIdx) => {\r\n//               return (\r\n//                 <Node\r\n//                   row={rowIdx}\r\n//                   col={colIdx}\r\n//                   key={rowIdx - colIdx}\r\n//                   plotWall={(m, n) => plotWall(m, n)}\r\n//                   isWall={col.isWall}\r\n//                 />\r\n//               );\r\n//             })}\r\n//           </div>\r\n//         );\r\n//       })}\r\n//     </div>\r\n//   );\r\n// }\r\n","import \"./App.css\";\nimport Board from \"./board/board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createContext } from \"react\";\r\n\r\nexport const context = createContext({\r\n  i: null,\r\n  j: null,\r\n  start_i: null,\r\n  start_j: null,\r\n  finish_i: null,\r\n  finish_j: null,\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { context } from \"./context\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <context.Provider\n      value={{\n        i: null,\n        j: null,\n        start_i: null,\n        start_j: null,\n        finish_i: null,\n        finish_j: null,\n      }}\n    >\n      <App />\n    </context.Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}